version: '3'

services:

   #VerneMQ server
   mqtt:
     image: erlio/docker-vernemq  #Using the official image from the VerneMQ team for now. Move to self-built image later
     hostname: mqtt_server
     ports:
       - 1884:1884
       - 8081:8081
     expose:
       - 1883
       - 1884
       - 8881
     environment:
        - DOCKER_VERNEMQ_USER_MQTT
        - DOCKER_VERNEMQ_LISTENER__TCP__DEFAULT=0.0.0.0:1883
        - DOCKER_VERNEMQ_ACCEPT_EULA=yes

     restart: always


   #Connects to TheThingsNetwork server and transfers all the data into VerneMQ
   connector_ttnbridge:
     build:
       context: ./Backend
     command: Connector_TTNBridge.py
     environment:
          - MQTT_USERNAME
          - MQTT_PASSWORD
          - MQTT_SERVER_URL
          - MQTT_SERVER_PORT
          - TTN_MQTT_USERNAME
          - TTN_MQTT_PASSWORD
          - TTN_MQTT_SERVER_URL
          - TTN_MQTT_SERVER_PORT
     restart: always

   #Save all raw messages into a Postgres table
   connector_rawmsg2postgres:
     build:
       context: ./Backend
     command: Connector_RawData2Postgres.py
     environment:
       - MQTT_USERNAME
       - MQTT_PASSWORD
       - MQTT_SERVER_URL
       - MQTT_SERVER_PORT
       - POSTGRES_PASSWORD
       - POSTGRES_DB
       - POSTGRES_USER
       - POSTGRES_URL
     restart: always

   #Decode waypoints
   connector_waypoint_decoder:
     build:
       context: ./Backend
     command: Connector_WaypointDecoder.py
     environment:
       - MQTT_USERNAME
       - MQTT_PASSWORD
       - MQTT_SERVER_URL
       - MQTT_SERVER_PORT
     restart: always

   #Breaks down the LoRa messages and extract relevant data (currently, waypoints)
   connector_process_data:
     build:
       context: ./Backend
     command: Connector_ProcessedDataWriter.py
     environment:
       - MQTT_USERNAME
       - MQTT_PASSWORD
       - MQTT_SERVER_URL
       - MQTT_SERVER_PORT
     restart: always


   #Saves the processed waypoints into a table
   connector_waypoints2postgres:
     build:
       context: ./Backend
     command: Connector_Waypoint2Postgres.py
     environment:
       - MQTT_USERNAME
       - MQTT_PASSWORD
       - MQTT_SERVER_URL
       - MQTT_SERVER_PORT
       - POSTGRES_PASSWORD
       - POSTGRES_DB
       - POSTGRES_USER
       - POSTGRES_URL
     restart: always


   #Pushes the waypoints to AFarCloud REST endpoint
   connector_waypoints2afarcloud:
     build:
       context: ./Backend
     command: Connector_Waypoint2afarcloud.py
     environment:
       - MQTT_USERNAME
       - MQTT_PASSWORD
       - MQTT_SERVER_URL
       - MQTT_SERVER_PORT
     restart: always

   #Sends data into influxDB (uncomment to enable)
   #   connector_influxdb:
   #  build:
   #    context: ./Backend
   #  command: Connector_WaypointDecoder.py
   #  environment:
   #    - MQTT_USERNAME
   #    - MQTT_PASSWORD
   #    - MQTT_SERVER_URL
   #    - MQTT_SERVER_PORT
   #    - INFLUXDB_URL=influxdb
   #    - INFLUXDB_PORT=8086
   #    - INFLUXDB_USERNAME=${INFLUXDB_ADMIN_USER}
   #    - INFLUXDB_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}grafana-polystat-panel
   #  restart: always

   #Postgres DB with Postgis extension
   postgis:
     build:
       context: ./postgis/
       args:
          POSTGRES_MAJOR: 11
     command: postgres -c 'max_connections=250'
     container_name: postgis
     hostname: postgis
     expose:
          - 5432
     environment:
          - POSTGRES_PASSWORD
          - POSTGRES_USER
          - POSTGRES_DB
     volumes:
          - ./data/postgis:/var/lib/postgresql/data

   #Runs Grafana
   grafana:
     image: grafana/grafana:latest
     expose:
        - 3000
     ports:
        - 8089:3000
     environment:
        - VIRTUAL_HOST=${GRAFANA_URL}
        - LETSENCRYPT_HOST=${GRAFANA_URL}
        - LETSENCRYPT_EMAIL=${LE_EMAIL}
        - GF_SERVER_ROOT_URL=https://${GRAFANA_URL}
        - GF_INSTALL_PLUGINS=pr0ps-trackmap-panel,grafana-worldmap-panel,grafana-clock-panel,briangann-gauge-panel,natel-plotly-panel,grafana-simple-json-datasource,satellogic-3d-globe-panel,pierosavi-imageit-panel,ryantxu-ajax-panel,snuids-trafficlights-panel,smartmakers-trafficlight-panel,farski-blendstat-panel
     volumes:
        - ./data/grafana:/var/lib/grafana
     user: "472"
     restart: always

   #Runs influxDB
   #influxdb:
   #  image: influxdb
   #  expose:
   #     - 8086
   #  environment:
   #     - INFLUXDB_DB
   #     - INFLUXDB_ADMIN_ENABLED
   #     - INFLUXDB_ADMIN_USER
   #     - INFLUXDB_ADMIN_PASSWORD
   #     - INFLUXDB_USER
   #  volumes:
   #     - /docker/volumes/influxdb:/var/lib/influxdb
   #  restart: always

   # A mockup REST API endpoint useful for testing purposes
   #mockup_rest:
    #image: nicoinn/mockup_rest:latest
    #build:
    #  context: ./Backend
    #command: Connector_DIGITABridge.py

     #expose:
     # - 5000
     #volumes:
            #- ./data/mockup_REST/:/data
        #environment:
            #- VIRTUAL_HOST=${MOCKUPREST_URL}
        #- LETSENCRYPT_HOST=${MOCKUPREST_URL}
        #- LETSENCRYPT_EMAIL=${LE_EMAIL}
        #- MQTT_USERNAME
        #- MQTT_PASSWORD
        #- MQTT_SERVER_URL
        #- MQTT_SERVER_PORT
        # restart: always

   #afarcloud_mqtt:
   #  build:
   #    context: ./Backend
   #  command: Connector_Waypoint2afarcloud.py
   #  environment:
   #    - MQTT_USERNAME
   #    - MQTT_PASSWORD
   #    - MQTT_SERVER_URL
   #    - MQTT_SERVER_PORT

   #  restart: always
